spring.application.name=gamification
# Gives us access to the H2 database web console
spring.h2.console.enabled=true
# Creates the database in a file
spring.datasource.url=jdbc:h2:file:~/gamification;AUTO_SERVER=TRUE
# Creates or updates the schema if needed
spring.jpa.hibernate.ddl-auto=update
# For educational purposes we will show the SQL in console
# spring.jpa.show-sql=true

#config both on the producer and consumer as we donot know which one will start first
rocketmq.attempts=attempts-topic

#spring.config.import=optional:consul:
spring.cloud.compatibility-verifier.enabled=false

#multiplication app as a producer
rocketmq.simple-consumer.endpoints=${SPRING_CLOUD_ROCKETMQ_PROXY_HOST:localhost}:8081
rocketmq.simple-consumer.filter-expression-type=tag
rocketmq.simple-consumer.tag=*
#rocketmq.push-consumer.endpoints=${SPRING_CLOUD_ROCKETMQ_PROXY_HOST:localhost}:8081

##working with default logback configuration for distributed tracing
logging.pattern.level=[${spring.application.name:-},%X{traceId:-},%X{spanId:-}]
logging.include-application-name=false
management.tracing.sampling.probability=1
management.zipkin.tracing.endpoint=http://${SPRING_CLOUD_ZIPKIN_HOST:localhost}:9411/api/v2/spans

#---
spring.config.activate.on-profile=docker


